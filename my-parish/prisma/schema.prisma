generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Parishioner model (converted from MongoDB)
model Parishioner {
  id           String       @id @default(cuid())
  firstName    String
  lastName     String
  dateOfBirth  DateTime
  address      Address?     @relation(fields: [addressId], references: [id])
  addressId    String?      @unique
  phoneNumber  String?
  email        String?      @unique
  notes        String?      @db.Text
  // Deceased and funeral data
  isDeceased   Boolean      @default(false)
  deceasedAt   DateTime?
  placeOfDeath String?
  deathCertificateNumber  String?
  deathCertificateIssuedBy String?
  deathReporterName       String?
  deathReporterRelation   String?
  deathReporterPhone      String?
  deathNotes    String?    @db.Text

  funeralDate     DateTime?
  funeralLocation String?
  cemeteryName    String?
  cremation       Boolean   @default(false)
  officiant       String?
  funeralNotes    String?   @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sacraments   Sacrament[]
  
  // Relations
  leadingGroups Group[]     @relation("GroupLeader")
  memberGroups  GroupMember[]
  
  @@index([isDeceased])
}

// Address model (extracted from Parishioner)
model Address {
  id           String      @id @default(cuid())
  street       String
  houseNumber  String
  postalCode   String
  city         String
  parishioner  Parishioner?
}

// Sacrament model (extracted from Parishioner)
model Sacrament {
  id            String      @id @default(cuid())
  type          String
  date          DateTime
  parishioner   Parishioner @relation(fields: [parishionerId], references: [id], onDelete: Cascade)
  parishionerId String

  @@index([parishionerId])
}

// Group model
model Group {
  id              String        @id @default(cuid())
  name            String
  description     String?       @db.Text
  leader          Parishioner   @relation("GroupLeader", fields: [leaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leaderId        String
  meetingSchedule String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Many-to-many relation with Parishioner through GroupMember
  members         GroupMember[]

  @@index([leaderId])
}

// GroupMember model (join table for Group and Parishioner)
model GroupMember {
  id            String      @id @default(cuid())
  group         Group       @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groupId       String
  parishioner   Parishioner @relation(fields: [parishionerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parishionerId String
  joinedAt      DateTime    @default(now())

  @@unique([groupId, parishionerId])
  @@index([groupId])
  @@index([parishionerId])
}

// Announcement model
model Announcement {
  id        String            @id @default(cuid())
  title     String
  date      DateTime          @default(now())
  imageUrl  String?
  extraInfo String?           @db.Text
  content   AnnouncementContent[]
}

// AnnouncementContent model (extracted from Announcement)
model AnnouncementContent {
  id            String      @id @default(cuid())
  order         Int
  text          String      @db.Text
  announcement  Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  announcementId String

  @@index([announcementId])
}

// News model
model News {
  id       String   @id @default(cuid())
  title    String
  subtitle String
  content  String   @db.Text
  imageUrl String?
  date     DateTime @default(now())
}

// Intention model - represents a week of intentions
model Intention {
  id          String   @id @default(cuid())
  title       String
  weekStart   DateTime @default(now()) // Start date of the week
  weekEnd     DateTime? // Optional to allow migration from existing data
  imageUrl    String?
  days        Day[]
}

// Day model - represents a day with multiple masses
model Day {
  id          String    @id @default(cuid())
  date        DateTime
  intentionId String
  intention   Intention @relation(fields: [intentionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  masses      Mass[]
  // Optional customizations from admin form
  liturgicalName String?
  headerColor    String?

  @@index([intentionId])
}

// Mass model - represents a mass with time and multiple intentions
model Mass {
  id          String    @id @default(cuid())
  time        String
  dayId       String?   // Optional to allow migration from existing data
  day         Day?      @relation(fields: [dayId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  intentions  MassIntention[]

  @@index([dayId])
}

// MassIntention model - represents a single intention for a mass
model MassIntention {
  id          String    @id @default(cuid())
  intention   String    @db.Text
  massId      String
  mass        Mass      @relation(fields: [massId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([massId])
}
